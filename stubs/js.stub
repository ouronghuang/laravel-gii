Vue.component('vDummyComponentPrefix-DummyComponent', {
  data() {
    return {
      list: [],
      search: {
        k: '',
        page: 1
      },
      paginate: {
        total: 0,
        per_page: 1,
        current: 1,
        last_page: 1
      },
      checkAllGroup: [],
      checkAll: false,
      indeterminate: false
    };
  },
  computed: {
    ids() {
      let tmp = [];

      _.each(this.list, v => {
        tmp.push(v.id);
      });

      return tmp;
    }
  },
  mounted() {
    this.getList();
  },
  methods: {
    getList(page = 1) {
      this.cancelCheckAllGroup();

      this.search.page = _.defaultTo(page, 1);

      if (!_.isInteger(this.search.page)) {
        this.search.page = 1;
      }

      this.$http.get('', {params: this.search})
          .then(({data}) => {
            this.list = data.data;

            this.paginate.total = data.meta.total;
            this.paginate.per_page = data.meta.per_page;
            this.paginate.current = data.meta.current_page;
            this.paginate.last_page = data.meta.last_page;
          });
    },
    handleCheckAll() {
      if (this.indeterminate) {
        this.checkAll = false;
      } else {
        this.checkAll = !this.checkAll;
      }

      this.indeterminate = false;

      if (this.checkAll) {
        this.checkAllGroup = this.ids;
      } else {
        this.checkAllGroup = [];
      }
    },
    checkAllGroupChange(data) {
      if (data.length === this.ids.length) {
        this.indeterminate = false;
        this.checkAll = true;
      } else if (data.length > 0) {
        this.indeterminate = true;
        this.checkAll = false;
      } else {
        this.indeterminate = false;
        this.checkAll = false;
      }
    },
    cancelCheckAllGroup() {
      this.checkAllGroup = [];
      this.checkAll = false;
      this.indeterminate = false;
    },
    handleDestroy(item) {
      this.$http.delete(item.destroy)
          .then(({data}) => {
            this.$Message.success(data);

            this.getList(this.search.page);
          });
    }
  }
});

Vue.component('vDummyComponentPrefix-DummyComponent-action', {
  props: [
    'info'
  ],
  data() {
    return {
      loading: false,
      formValidate: {
        id: _.get(this.info, 'id', 0),
        DummyForms
      },
      ruleValidate: {
        DummyRules
      }
    };
  },
  mounted() {
    this.method = 'post';
    this.uri = 'DummyUrl/DummyTable';

    if (_.get(this.info, 'id')) {
      this.method = 'patch';
      this.uri = `${this.uri}/${this.info.id}`;
    }
  },
  methods: {
    handleSubmit() {
      this.$refs.formValidate.validate((valid) => {
        if (valid) {
          this.loading = true;

          this.$http[this.method](this.uri, this.formValidate)
            .then(({data}) => {
              this.$Message.success(data);

              setTimeout(() => {
                window.location.reload();
              }, 500);
            })
            .catch(error => {
              this.loading = false;
            });
        }
      });
    },
    handleFileChange(e, item) {
      let files = e.target.files;

      if (!files) {
        return;
      }

      files = Array.prototype.slice.call(files);

      if (files.length === 0) {
        return;
      }

      let file = _.first(files),
        form = new FormData;

      form.append('file', file, file.name);

      this.$http.post('DummyUrl/upload', form)
          .then(({data}) => {
            this.formValidate[item] = data.link;
          });
    }
  }
});
